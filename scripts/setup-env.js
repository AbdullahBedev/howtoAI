#!/usr/bin/env node

/**
 * Script to set up required environment variables for the How-to-AI platform
 * 
 * Usage:
 *   node scripts/setup-env.js [environment]
 * 
 * where environment is one of: development, staging, production (default: development)
 */

const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const { execSync } = require('child_process');

// Get environment from command line argument
const environment = process.argv[2] || 'development';
const validEnvironments = ['development', 'staging', 'production'];

if (!validEnvironments.includes(environment)) {
  console.error(`Error: Environment must be one of: ${validEnvironments.join(', ')}`);
  process.exit(1);
}

console.log(`Setting up environment variables for ${environment} environment...`);

// Generate random strings for secrets
const generateSecret = (length = 32) => {
  return crypto.randomBytes(length).toString('hex');
};

// Configuration for different environments
const envConfigs = {
  development: {
    NODE_ENV: 'development',
    DATABASE_URL: 'postgresql://postgres:postgres@localhost:5432/howtoai',
    JWT_SECRET: generateSecret(),
    BACKUP_DIR: './backups',
    BACKUP_RETENTION_DAYS: '7',
    LOG_LEVEL: 'debug',
    PORT: '3000',
  },
  staging: {
    NODE_ENV: 'staging',
    DATABASE_URL: 'postgresql://howtoai:PASSWORD@staging-db.example.com:5432/howtoai',
    JWT_SECRET: generateSecret(),
    BACKUP_DIR: '/var/backups/howtoai',
    BACKUP_S3_BUCKET: 'howtoai-backups-staging',
    BACKUP_RETENTION_DAYS: '14',
    LOG_LEVEL: 'info',
    PORT: '3000',
  },
  production: {
    NODE_ENV: 'production',
    DATABASE_URL: 'postgresql://howtoai:PASSWORD@production-db.example.com:5432/howtoai',
    JWT_SECRET: generateSecret(),
    BACKUP_DIR: '/var/backups/howtoai',
    BACKUP_S3_BUCKET: 'howtoai-backups-prod',
    BACKUP_RETENTION_DAYS: '30',
    LOG_LEVEL: 'info',
    PORT: '3000',
    DAILY_BACKUP_TIME: '01:00',
    WEEKLY_BACKUP_TIME: '02:00',
    MONTHLY_BACKUP_TIME: '03:00',
  },
};

// Get config for the specified environment
const config = envConfigs[environment];

// Build .env content
let envContent = '# Generated by setup-env.js for ' + environment + ' environment\n';
envContent += '# Generated on ' + new Date().toISOString() + '\n\n';

for (const [key, value] of Object.entries(config)) {
  envContent += `${key}=${value}\n`;
}

// Add placeholders for third-party services
if (environment !== 'development') {
  envContent += '\n# Third-party services - replace with actual values\n';
  envContent += 'STRIPE_API_KEY=sk_test_...\n';
  envContent += 'STRIPE_WEBHOOK_SECRET=whsec_...\n';
  envContent += 'PAYPAL_CLIENT_ID=...\n';
  envContent += 'PAYPAL_CLIENT_SECRET=...\n';
  
  if (environment === 'production') {
    envContent += '\n# Monitoring and error tracking\n';
    envContent += 'SENTRY_DSN=https://...\n';
  }
}

// Write to .env file
const envPath = path.join(process.cwd(), '.env');
fs.writeFileSync(envPath, envContent);

console.log(`Environment file created at ${envPath}`);

// Additional setup for development
if (environment === 'development') {
  try {
    // Check if PostgreSQL is running
    console.log('Checking PostgreSQL connection...');
    execSync('pg_isready -h localhost -p 5432', { stdio: 'pipe' });
    console.log('PostgreSQL is running.');
    
    // Create database if it doesn't exist
    console.log('Setting up development database...');
    try {
      execSync('psql -h localhost -p 5432 -U postgres -c "CREATE DATABASE howtoai;"', { stdio: 'pipe' });
      console.log('Database "howtoai" created.');
    } catch (error) {
      console.log('Database "howtoai" already exists or could not be created.');
    }
    
    // Create backup directory
    const backupDir = config.BACKUP_DIR;
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
      console.log(`Created backup directory: ${backupDir}`);
    }
    
    console.log('Development environment setup complete.');
    console.log('You can now run: npx prisma migrate dev');
  } catch (error) {
    console.error('Error during development setup:', error.message);
    console.log('Please ensure PostgreSQL is installed and running on localhost:5432.');
  }
}

console.log(`\nSetup complete for ${environment} environment!`);
console.log(`\nNotes:`);
console.log(`- The JWT_SECRET has been randomly generated. Keep it secure.`);
if (environment !== 'development') {
  console.log(`- Don't forget to replace placeholder values for third-party services.`);
  console.log(`- Ensure your database credentials are correct in the DATABASE_URL.`);
} 